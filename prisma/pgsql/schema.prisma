generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL_POSTGRESQL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model bookmark {
  bookmarkId Int      @id @default(autoincrement()) 
  mediaId    Int      
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int      
  chapter    chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId  Int      
  userId     Int      
  browseType String   @default("flow") 
  page       Int      
  createTime DateTime @default(now()) 
  updateTime DateTime @updatedAt @default(now()) 
  pageImage  String?  

  @@unique([chapterId, page], map: "opage")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model chapter {
  chapterId     Int        @id @default(autoincrement()) 
  manga         manga      @relation(fields: [mangaId], references: [mangaId])
  mangaId       Int        
  media         media      @relation(fields: [mediaId], references: [mediaId])
  mediaId       Int        
  pathId        Int        
  browseType    String     @default("flow") 
  subTitle      String?    
  picNum        Int?       
  createTime    DateTime   @default(now()) 
  updateTime    DateTime   @updatedAt @default(now()) 
  chapterName   String     
  chapterPath   String     
  chapterType   String     @default("image") 
  chapterCover  String?    
  chapterNumber String?    
  deleteFlag    Int        @default(0)
  bookmarks     bookmark[]
  compress      compress[]
  history       history[]
  collects      collect[]
  latests       latest[]

  @@unique([mangaId, chapterName], map: "unique-name")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model collect {
  collectId   Int      @id @default(autoincrement()) 
  collectType String   @default("manga") 
  user        user     @relation(fields: [userId], references: [userId])
  userId      Int      
  mediaId     Int      
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      
  mangaName   String?  
  chapter     chapter? @relation(fields: [chapterId], references: [chapterId])
  chapterId   Int?     
  chapterName String?  
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 

  @@unique([userId, collectType, mangaId, chapterId], map: "uniqueMangaChapter")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model compress {
  compressId     Int      @id @unique(map: "id") @default(autoincrement()) 
  compressType   String   
  compressPath   String   
  compressStatus String?  
  imageCount     Int?     
  mediaId        Int      
  manga          manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId        Int      
  chapter        chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId      Int      @unique(map: "uniqueChapter") 
  chapterPath    String   
  userId         Int?     
  createTime     DateTime @default(now()) 
  updateTime     DateTime @updatedAt @default(now()) 
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model history {
  historyId   Int      @id @default(autoincrement()) 
  user        user     @relation(fields: [userId], references: [userId])
  userId      Int      
  mediaId     Int      
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      
  mangaName   String?  
  chapter     chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId   Int      
  chapterName String?  
  chapterPath String?  
  browseType  String   @default("flow") 
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model latest {
  latestId   Int      @id @default(autoincrement()) 
  page       Int      
  finish     Int      @default(0) 
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int        
  chapter    chapter  @relation(fields: [chapterId], references: [chapterId])  
  chapterId  Int      
  userId     Int      
  createTime DateTime @default(now()) 
  updateTime DateTime @updatedAt @default(now()) 

  @@unique([chapterId, userId], map: "uniqueChapterUser")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model log {
  logId       Int      @id @default(autoincrement()) 
  logType     String   @default("process") 
  logLevel    Int      @default(0) 
  module      String?  
  queue       String?  
  message     String   
  exception   String?  @db.Text
  version     String   @db.Text
  environment String   @db.Text
  context     Json?
  device      Json?
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 
  userId      Int?     
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model login {
  loginId    Int      @id @default(autoincrement()) 
  user       user?    @relation(fields: [userId], references: [userId])
  userId     Int?     
  userName   String?  
  nickName   String?  
  request    Int      
  ip         String   
  userAgent  Json?
  createTime DateTime @default(now()) 
  updateTime DateTime @updatedAt @default(now()) 
  token      String?  
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model manga {
  mangaId      Int        @id @default(autoincrement()) 
  media        media      @relation(fields: [mediaId], references: [mediaId])
  mediaId      Int        
  path         path       @relation(fields: [pathId], references: [pathId])
  pathId       Int        
  mangaName    String     
  mangaPath    String     
  parentPath   String?    
  mangaCover   String?    
  mangaNumber  String?    
  chapterCount Int?       
  browseType   String     @default("flow") 
  direction    Int        @default(1) 
  removeFirst  Int        @default(0) 
  title        String?    
  subTitle     String?    
  author       String?    
  describe     String?    
  publishDate  DateTime?  @db.Date
  deleteFlag   Int        @default(0)
  createTime   DateTime   @default(now()) 
  updateTime   DateTime   @updatedAt @default(now()) 
  latests      latest[]
  historys     history[]
  chapters     chapter[]
  collects     collect[]
  bookmarks    bookmark[]
  compress     compress[]
  metas        meta[]
  mangaTags    mangaTag[]

  @@unique([mediaId, mangaPath], map: "oname")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model mangaTag {
  mangaTagId Int      @id @default(autoincrement()) 
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int      
  tag        tag      @relation(fields: [tagId], references: [tagId])
  tagId      Int      
  createTime DateTime @default(now()) 
  updateTime DateTime @updatedAt @default(now()) 

  @@unique([mangaId, tagId], map: "unique-mangaTag")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model media {
  mediaId         Int              @id @default(autoincrement()) 
  mediaName       String           @unique(map: "uniqueMedianame") 
  mediaType       Int              
  mediaRating     String           @default("child") 
  mediaCover      String?          
  directoryFormat Int              @default(0) 
  browseType      String           @default("flow") 
  direction       Int              @default(1) 
  removeFirst     Int              @default(0) 
  deleteFlag      Int              @default(0)
  createTime      DateTime         @default(now()) 
  updateTime      DateTime         @updatedAt @default(now()) 
  paths           path[]
  mangas          manga[]
  chapters        chapter[]
  mediaPermissons mediaPermisson[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model mediaPermisson {
  mediaPermissonId Int      @id @default(autoincrement()) 
  user             user     @relation(fields: [userId], references: [userId])
  userId           Int      
  media            media    @relation(fields: [mediaId], references: [mediaId])
  mediaId          Int      
  createTime       DateTime @default(now()) 
  updateTime       DateTime @updatedAt @default(now()) 

  @@unique([userId, mediaId], map: "userMedia")
  @@map("mediaPermisson")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model meta {
  metaId      Int      @id @default(autoincrement()) 
  metaName    String   
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      
  metaFile    String?  
  metaContent String?  
  description String?  
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model path {
  pathId       Int       @id @default(autoincrement()) 
  media        media     @relation(fields: [mediaId], references: [mediaId])
  mediaId      Int       
  pathType     String?   
  autoScan     Int       @default(0) 
  include      String?   
  exclude      String?   
  lastScanTime DateTime? 
  deleteFlag   Int       @default(0)
  createTime   DateTime  @default(now()) 
  updateTime   DateTime  @updatedAt @default(now()) 
  pathContent  String    
  mangas       manga[]

  @@unique([mediaId, pathContent], map: "opath")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model scan {
  scanId      Int      @default(autoincrement()) 
  scanStatus  String   
  targetPath  String?  
  pathId      Int      @unique(map: "uniquePath") 
  scanCount   Int?     
  scanIndex   Int?     @default(0)
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 
  pathContent String   

  @@id([scanId, pathId])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model tag {
  tagId       Int        @id @default(autoincrement()) 
  tagName     String     
  tagColor    String     @default("#a0d911") 
  userId      Int?       
  description String?    
  createTime  DateTime   @default(now()) 
  updateTime  DateTime   @updatedAt @default(now()) 
  mangaTags   mangaTag[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model task {
  taskId     Int       @id @default(autoincrement()) 
  taskName   String    @default("") 
  command    String    @db.Text
  createTime DateTime  @default(now()) 
  updateTime DateTime  @updatedAt @default(now()) 
  status     String    @default("pending") 
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  error      String?   @db.Text
  priority   Int       @default(10)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model taskFailed {
  taskId     Int       @id @default(autoincrement()) 
  taskName   String    @default("") 
  status     String    
  command    String    @db.Text
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  error      String?   @db.Text
  createTime DateTime  @default(now()) 
  updateTime DateTime  @updatedAt @default(now()) 

  @@map("taskFailed")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model taskSuccess {
  taskId     Int       @id @default(autoincrement()) 
  taskName   String    @default("") 
  status     String    
  command    String    @db.Text
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  createTime DateTime  @default(now()) 
  updateTime DateTime  @updatedAt @default(now()) 

  @@map("taskSuccess")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model token {
  tokenId    Int       @id @default(autoincrement()) 
  user       user      @relation(fields: [userId], references: [userId])
  userId     Int       
  token      String    
  expires    DateTime? 
  createTime DateTime  @default(now()) 
  updateTime DateTime  @updatedAt @default(now()) 
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model user {
  userId          Int              @id @default(autoincrement()) 
  userName        String           @unique(map: "uniqueUsername") 
  passWord        String           @db.Char(32)
  nickName        String?          
  header          String?          
  role            String?          @default("user")
  mediaPermit     String?          @default("limit")
  createTime      DateTime         @default(now()) 
  updateTime      DateTime         @updatedAt @default(now()) 
  userConfig      Json?
  logins          login[]
  tokens          token[]
  userPermissons  userPermisson[]
  mediaPermissons mediaPermisson[]
  historys        history[]
  collects        collect[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model userPermisson {
  userPermissonId Int      @id @default(autoincrement()) 
  user            user     @relation(fields: [userId], references: [userId])
  userId          Int      
  module          String   
  operation       String   @default("default") 
  createTime      DateTime @default(now()) 
  updateTime      DateTime @updatedAt @default(now()) 

  @@unique([userId, module, operation], map: "userModuleOperation")
  @@map("userPermisson")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model version {
  versionId   Int      @id @default(autoincrement()) 
  version     String   @unique(map: "uniqueVersion") 
  description String?  
  createTime  DateTime @default(now()) 
  updateTime  DateTime @updatedAt @default(now()) 
}

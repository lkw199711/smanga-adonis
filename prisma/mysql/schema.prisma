generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL_MYSQL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model bookmark {
  bookmarkId Int      @id @default(autoincrement()) @db.UnsignedInt
  mediaId    Int      @db.UnsignedInt
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int      @db.UnsignedInt
  chapter    chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId  Int      @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  browseType String   @default("flow") @db.VarChar(191)
  page       Int      @db.UnsignedInt
  createTime DateTime @default(now()) @db.DateTime(6)
  updateTime DateTime @updatedAt @default(now()) @db.DateTime(6)
  pageImage  String?  @db.VarChar(191)

  @@unique([chapterId, page], map: "opage")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model chapter {
  chapterId     Int        @id @default(autoincrement()) @db.UnsignedInt
  manga         manga      @relation(fields: [mangaId], references: [mangaId])
  mangaId       Int        @db.UnsignedInt
  media         media      @relation(fields: [mediaId], references: [mediaId])
  mediaId       Int        @db.UnsignedInt
  pathId        Int        @db.UnsignedInt
  browseType    String     @default("flow") @db.VarChar(191)
  subTitle      String?    @db.VarChar(191)
  picNum        Int?       @db.UnsignedInt
  createTime    DateTime   @default(now()) @db.DateTime(6)
  updateTime    DateTime   @updatedAt @default(now()) @db.DateTime(6)
  chapterName   String     @db.VarChar(191)
  chapterPath   String     @db.VarChar(191)
  chapterType   String     @default("image") @db.VarChar(191)
  chapterCover  String?    @db.VarChar(191)
  chapterNumber String?    @db.VarChar(191)
  deleteFlag    Int        @default(0)
  bookmarks     bookmark[]
  compress      compress[]
  history       history[]
  collects      collect[]
  latests      latest[]

  @@unique([mangaId, chapterName], map: "oname")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model collect {
  collectId   Int      @id @default(autoincrement()) @db.UnsignedInt
  collectType String   @default("manga") @db.VarChar(191)
  user        user     @relation(fields: [userId], references: [userId])
  userId      Int      @db.UnsignedInt
  mediaId     Int      @db.UnsignedInt
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      @db.UnsignedInt
  mangaName   String?  @db.VarChar(191)
  chapter     chapter? @relation(fields: [chapterId], references: [chapterId])
  chapterId   Int?     @db.UnsignedInt
  chapterName String?  @db.VarChar(191)
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)

  @@unique([userId, collectType, mangaId, chapterId], map: "uniqueMangaChapter")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model compress {
  compressId     Int      @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  compressType   String   @db.VarChar(191)
  compressPath   String   @db.VarChar(191)
  compressStatus String?  @db.VarChar(191)
  imageCount     Int?     @db.UnsignedInt
  mediaId        Int      @db.UnsignedInt
  manga          manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId        Int      @db.UnsignedInt
  chapter        chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId      Int      @unique(map: "uniqueChapter") @db.UnsignedInt
  chapterPath    String   @db.VarChar(191)
  userId         Int?     @db.UnsignedInt
  createTime     DateTime @default(now()) @db.DateTime(6)
  updateTime     DateTime @updatedAt @default(now()) @db.DateTime(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model history {
  historyId   Int      @id @default(autoincrement()) @db.UnsignedInt
  user        user     @relation(fields: [userId], references: [userId])
  userId      Int      @db.UnsignedInt
  mediaId     Int      @db.UnsignedInt
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      @db.UnsignedInt
  mangaName   String?  @db.VarChar(191)
  chapter     chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId   Int      @db.UnsignedInt
  chapterName String?  @db.VarChar(191)
  chapterPath String?  @db.VarChar(191)
  browseType  String   @default("flow") @db.VarChar(191)
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model latest {
  latestId   Int      @id @default(autoincrement()) @db.UnsignedInt
  page       Int      @db.UnsignedInt
  count      Int?     @db.UnsignedInt
  finish     Int      @default(0) @db.UnsignedInt
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int      @db.UnsignedInt
  chapter    chapter  @relation(fields: [chapterId], references: [chapterId])
  chapterId  Int      @db.UnsignedInt
  userId     Int      @db.UnsignedInt
  createTime DateTime @default(now()) @db.DateTime(6)
  updateTime DateTime @updatedAt @default(now()) @db.DateTime(6)

  @@unique([chapterId, userId], map: "uniqueChapterUser")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model log {
  logId       Int      @id @default(autoincrement()) @db.UnsignedInt
  logType     String   @default("process") @db.VarChar(191)
  logLevel    Int      @default(0) @db.UnsignedInt
  module      String?  @db.VarChar(191)
  queue       String?  @db.VarChar(191)
  message     String   @db.VarChar(191)
  exception   String?  @db.Text
  version     String   @db.Text
  environment String   @db.Text
  context     Json?
  device      Json?
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)
  userId      Int?     @db.UnsignedInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model login {
  loginId    Int      @id @default(autoincrement()) @db.UnsignedInt
  user       user?    @relation(fields: [userId], references: [userId])
  userId     Int?     @db.UnsignedInt
  userName   String?  @db.VarChar(191)
  nickName   String?  @db.VarChar(191)
  request    Int      @db.UnsignedInt
  ip         String   @db.VarChar(191)
  userAgent  Json?
  createTime DateTime @default(now()) @db.DateTime(6)
  updateTime DateTime @updatedAt @default(now()) @db.DateTime(6)
  token      String?  @db.VarChar(191)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model manga {
  mangaId      Int        @id @default(autoincrement()) @db.UnsignedInt
  media        media      @relation(fields: [mediaId], references: [mediaId])
  mediaId      Int        @db.UnsignedInt
  path         path       @relation(fields: [pathId], references: [pathId])
  pathId       Int        @db.UnsignedInt
  mangaName    String     @db.VarChar(191)
  mangaPath    String     @db.VarChar(191)
  parentPath   String?    @db.VarChar(191)
  mangaCover   String?    @db.VarChar(191)
  mangaNumber  String?    @db.VarChar(191)
  chapterCount Int?       @db.UnsignedInt
  browseType   String     @default("flow") @db.VarChar(191)
  direction    Int        @default(1) @db.UnsignedInt
  removeFirst  Int        @default(0) @db.UnsignedInt
  title        String?    @db.VarChar(191)
  subTitle     String?    @db.VarChar(191)
  author       String?    @db.VarChar(191)
  describe     String?    @db.VarChar(191)
  publishDate  DateTime?  @db.Date
  deleteFlag   Int        @default(0)
  createTime   DateTime   @default(now()) @db.DateTime(6)
  updateTime   DateTime   @updatedAt @default(now()) @db.DateTime(6)
  latests      latest[]
  historys     history[]
  chapters     chapter[]
  collects     collect[]
  bookmarks    bookmark[]
  compress     compress[]
  metas        meta[]
  mangaTags    mangaTag[]

  @@unique([mediaId, mangaPath], map: "oname")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model mangaTag {
  mangaTagId Int      @id @default(autoincrement()) @db.UnsignedInt
  manga      manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId    Int      @db.UnsignedInt
  tag        tag      @relation(fields: [tagId], references: [tagId])
  tagId      Int      @db.UnsignedInt
  createTime DateTime @default(now()) @db.DateTime(6)
  updateTime DateTime @updatedAt @default(now()) @db.DateTime(6)

  @@unique([mangaId, tagId], map: "mangaTag")
  @@map("mangaTag")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model media {
  mediaId         Int              @id @default(autoincrement()) @db.UnsignedInt
  mediaName       String           @unique(map: "uniqueMedianame") @db.VarChar(191)
  mediaType       Int              @db.UnsignedInt
  mediaRating     String           @default("child") @db.VarChar(191)
  mediaCover      String?          @db.VarChar(191)
  directoryFormat Int              @default(0) @db.UnsignedInt
  browseType      String           @default("flow") @db.VarChar(191)
  direction       Int              @default(1) @db.UnsignedInt
  removeFirst     Int              @default(0) @db.UnsignedInt
  deleteFlag      Int              @default(0)
  createTime      DateTime         @default(now()) @db.DateTime(6)
  updateTime      DateTime         @updatedAt @default(now()) @db.DateTime(6)
  paths           path[]
  mangas          manga[]
  chapters        chapter[]
  mediaPermissons mediaPermisson[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model mediaPermisson {
  mediaPermissonId Int      @id @default(autoincrement()) @db.UnsignedInt
  user             user     @relation(fields: [userId], references: [userId])
  userId           Int      @db.UnsignedInt
  media            media    @relation(fields: [mediaId], references: [mediaId])
  mediaId          Int      @db.UnsignedInt
  createTime       DateTime @default(now()) @db.DateTime(6)
  updateTime       DateTime @updatedAt @default(now()) @db.DateTime(6)

  @@unique([userId, mediaId], map: "userMedia")
  @@map("mediaPermisson")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model meta {
  metaId      Int      @id @default(autoincrement()) @db.UnsignedInt
  metaName    String   @db.VarChar(191)
  manga       manga    @relation(fields: [mangaId], references: [mangaId])
  mangaId     Int      @db.UnsignedInt
  metaFile    String?  @db.VarChar(191)
  metaContent String?  @db.VarChar(191)
  description String?  @db.VarChar(191)
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model path {
  pathId       Int       @id @default(autoincrement()) @db.UnsignedInt
  media        media     @relation(fields: [mediaId], references: [mediaId])
  mediaId      Int       @db.UnsignedInt
  pathType     String?   @db.VarChar(191)
  autoScan     Int       @default(0) @db.UnsignedInt
  include      String?   @db.VarChar(191)
  exclude      String?   @db.VarChar(191)
  lastScanTime DateTime? @db.DateTime(0)
  deleteFlag   Int       @default(0)
  createTime   DateTime  @default(now()) @db.DateTime(6)
  updateTime   DateTime  @updatedAt @default(now()) @db.DateTime(6)
  pathContent  String    @db.VarChar(191)
  mangas       manga[]

  @@unique([mediaId, pathContent], map: "opath")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model scan {
  scanId      Int      @default(autoincrement()) @db.UnsignedInt
  scanStatus  String   @db.VarChar(191)
  targetPath  String?  @db.VarChar(191)
  pathId      Int      @unique(map: "uniquePath") @db.UnsignedInt
  scanCount   Int?     @db.UnsignedInt
  scanIndex   Int?     @default(0)
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)
  pathContent String   @db.VarChar(191)

  @@id([scanId, pathId])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model tag {
  tagId       Int        @id @default(autoincrement()) @db.UnsignedInt
  tagName     String     @db.VarChar(191)
  tagColor    String     @default("#a0d911") @db.VarChar(191)
  userId      Int?       @db.UnsignedInt
  description String?    @db.VarChar(191)
  createTime  DateTime   @default(now()) @db.DateTime(6)
  updateTime  DateTime   @updatedAt @default(now()) @db.DateTime(6)
  mangaTags   mangaTag[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model task {
  taskId     Int       @id @default(autoincrement()) @db.UnsignedInt
  taskName   String    @default("") @db.VarChar(191)
  command    String    @db.Text
  createTime DateTime  @default(now()) @db.DateTime(6)
  updateTime DateTime  @updatedAt @default(now()) @db.DateTime(6)
  status     String    @default("pending") @db.VarChar(191)
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  error      String?   @db.Text
  priority   Int       @default(10)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model taskFailed {
  taskId     Int       @id @default(autoincrement()) @db.UnsignedInt
  taskName   String    @default("") @db.VarChar(191)
  status     String    @db.VarChar(191)
  command    String    @db.Text
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  error      String?   @db.Text
  createTime DateTime  @default(now()) @db.DateTime(6)
  updateTime DateTime  @updatedAt @default(now()) @db.DateTime(6)

  @@map("taskFailed")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model taskSuccess {
  taskId     Int       @id @default(autoincrement()) @db.UnsignedInt
  taskName   String    @default("") @db.VarChar(191)
  status     String    @db.VarChar(191)
  command    String    @db.Text
  args       Json?
  startTime  DateTime? @db.Timestamp(0)
  endTime    DateTime? @db.Timestamp(0)
  createTime DateTime  @default(now()) @db.DateTime(6)
  updateTime DateTime  @updatedAt @default(now()) @db.DateTime(6)

  @@map("taskSuccess")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model token {
  tokenId    Int       @id @default(autoincrement()) @db.UnsignedInt
  user       user      @relation(fields: [userId], references: [userId])
  userId     Int       @db.UnsignedInt
  token      String    @db.VarChar(191)
  expires    DateTime? @db.DateTime(0)
  createTime DateTime  @default(now()) @db.DateTime(6)
  updateTime DateTime  @updatedAt @default(now()) @db.DateTime(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model user {
  userId          Int              @id @default(autoincrement()) @db.UnsignedInt
  userName        String           @unique(map: "uniqueUsername") @db.VarChar(191)
  passWord        String           @db.Char(32)
  nickName        String?          @db.VarChar(191)
  header          String?          @db.VarChar(191)
  role            String?          @default("user") @db.VarChar(191)
  mediaPermit     String?          @default("limit") @db.VarChar(191)
  createTime      DateTime         @default(now()) @db.DateTime(6)
  updateTime      DateTime         @updatedAt @default(now()) @db.DateTime(6)
  userConfig      Json?
  logins          login[]
  tokens          token[]
  userPermissons  userPermisson[]
  mediaPermissons mediaPermisson[]
  historys        history[]
  collects        collect[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model userPermisson {
  userPermissonId Int      @id @default(autoincrement()) @db.UnsignedInt
  user            user     @relation(fields: [userId], references: [userId])
  userId          Int      @db.UnsignedInt
  module          String   @db.VarChar(100)
  operation       String   @default("default") @db.VarChar(100)
  createTime      DateTime @default(now()) @db.DateTime(6)
  updateTime      DateTime @updatedAt @default(now()) @db.DateTime(6)

  @@unique([userId, module, operation], map: "userModuleOperation")
  @@map("userPermisson")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations
model version {
  versionId   Int      @id @default(autoincrement()) @db.UnsignedInt
  version     String   @unique(map: "uniqueVersion") @db.VarChar(191)
  description String?  @db.VarChar(191)
  createTime  DateTime @default(now()) @db.DateTime(6)
  updateTime  DateTime @updatedAt @default(now()) @db.DateTime(6)
}
